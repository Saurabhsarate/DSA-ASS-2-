#include<iostream>
#include<string.h>
using namespace std;

struct node{
    char data;
    node *left;
    node *right;
    };

class tree
{
    char prefix[20];
    public:
    node *top;
    void expression(char[]);
    void display(node *);
    void non_rec_postorder(node *);
    void del(node *);
};

class stack1
{
   node *data[30];
   int top;
   public:
   stack1()
   {
      top=-1;
   }
   int empty()
    {
        if(top==-1)
           return 1;
        return 0;
    }

    void push(node *p)
    {
        data[++top]=p;
    }
    node *pop()
    {
        return(data[top--]);
    }
};

void tree::expression(char prefix[])
{
  char c;
  stack1 s;
  node *t1, *t2;
  int len,i;
  len=strlen(prefix);

    for(i=len-1;i>=0;i--)
    {    
        top=new node;
        top->left=NULL;
        top->right=NULL;
        if(isalpha(prefix[i]))
        {
            top->data=prefix[i];
            s.push(top);
         }

        else if(prefix[i]=='+'||prefix[i]=='*'||prefix[i]=='-'||prefix[i]=='/')
        {
            t2=s.pop();

            t1=s.pop();
            top->data=prefix[i];
            top->left=t2;
            top->right=t1;
            s.push(top);

        }
       
    }
        top=s.pop();
   
}

void tree::display(node * root)
{
     if(root!=NULL)
     {
     cout<<root->data;
     display(root->left);
     display(root->right);
     }
}

void tree::non_rec_postorder(node *top)
{
     stack1 s1,s2;
     node *T=top;
     cout<<"\n";
     s1.push(T);
     while(!s1.empty())
     {
         T=s1.pop();
         s2.push(T);
         if(T->left!=NULL)
         s1.push(T->left);
         if(T->right!=NULL)
         s1.push(T->right);
      }

     while(!s2.empty())
     {
         top=s2.pop();
         cout<<top->data;
     }
}

void tree::del(node* node)
{
    if(node == NULL)
    return;
    del(node->left);
    del(node->right);

    cout<<"Deleting node:"<<node->data;
    free(node);
}

int main()
{
   char expr[20];
   tree t;

   cout<<"Enter prefix expression:";
   cin>>expr;
   cout<<expr;

   t.expression(expr);
   
   t.non_rec_postorder(t.top);
}


##################################33
ALGORIHM

Algorithm to insert a node:

Step1-Search for the node whose child is the be inserted the is a node at some level i, and a node is to be inserted at the level i+1 as either its left child or right child This is the node after which the insertion is to be made.
step2-link a new node to the node that becomes its parent new that is,either the L child or the R child

Alogirthm the traverse a tree 
*Inorder traversal
until all nodes are traversal
step1- Recursively traversal left subtree
step2- Recursively traversal right subtree
step-visit root node

*preorder
traversal until all nodes are traversal
step1-visit root node
step2- Recursively traversal left subtree
step3- Recursively traversal right subtree

*postorder
until all nodes are traversed
step1- Recursively traversal left subtree
step2- Recursively traversal right subtree
step3-visit root node

Algorithm to copy one tree into another tree
Step1-if(Root==NULL)
then return null
step2-Tmp=new Tree node
Step3- Tmp->Lchild=Tree copy(Root->Lchild);
Step4-Tmp->Rchild=Tree copy(Root->Rchild);
step5- Tmp-Data=Root->Data;
then return Tmp;
